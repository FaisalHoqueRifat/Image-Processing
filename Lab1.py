# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/111BYYSCiz2usRFBDAgX5kSc0ef3sde-L
"""

!pip install opencv-python

import cv2
from google.colab.patches import cv2_imshow

img = cv2.imread('iiuc.jpg')
cv2_imshow(img)  # Displays image in notebook output

import cv2
import numpy as np
from google.colab.patches import cv2_imshow

img = cv2.imread('iiuc.jpg')
hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)

# Increase brightness
h, s, v = cv2.split(hsv)
v = cv2.add(v, 80)  # increase value
v[v > 255] = 255
final_hsv = cv2.merge((h, s, v))
bright_img = cv2.cvtColor(final_hsv, cv2.COLOR_HSV2BGR)
cv2_imshow(bright_img)

# Decrease brightness
v = cv2.subtract(v, 60)  # decrease value
v[v < 0] = 0
final_hsv = cv2.merge((h, s, v))
dark_img = cv2.cvtColor(final_hsv, cv2.COLOR_HSV2BGR)
cv2_imshow(dark_img)

import cv2
import numpy as np
import matplotlib.pyplot as plt

# 1. Read RGB image
img = cv2.imread("image.jpg")        # Load image (BGR format by default in OpenCV)

# Convert BGR to RGB for display with matplotlib
img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# --------------------------------------------------
# 1. Convert RGB to Grayscale
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# --------------------------------------------------
# 2. Convert Grayscale to Binary
# Using Otsu's thresholding
_, binary = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

# --------------------------------------------------
# 3. Reduce levels of grayscale image
def reduce_gray_levels(image, levels):
    # Map grayscale (0â€“255) to fewer levels
    factor = 256 // levels
    reduced = (image // factor) * factor
    return reduced

gray_64 = reduce_gray_levels(gray, 64)
gray_32 = reduce_gray_levels(gray, 32)
gray_16 = reduce_gray_levels(gray, 16)

# --------------------------------------------------
# Display all results
titles = ["Original RGB", "Grayscale", "Binary",
          "Gray (64 levels)", "Gray (32 levels)", "Gray (16 levels)"]
images = [img_rgb, gray, binary, gray_64, gray_32, gray_16]

plt.figure(figsize=(12, 8))
for i in range(len(images)):
    plt.subplot(2, 3, i + 1)
    if len(images[i].shape) == 2:  # grayscale
        plt.imshow(images[i], cmap="gray")
    else:
        plt.imshow(images[i])
    plt.title(titles[i])
    plt.axis("off")
plt.tight_layout()
plt.show()