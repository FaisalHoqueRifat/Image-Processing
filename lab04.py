# -*- coding: utf-8 -*-
"""Lab04.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12GVK3jQZq5SbBmEjakA0mAIotrYJqSqT
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load an example image (you can upload your own image if needed)
# If you are running this in Google Colab, you can upload an image using the code below.
from google.colab import files
uploaded = files.upload()

# Read the uploaded image
image_path = list(uploaded.keys())[0]
img = cv2.imread(image_path, cv2.IMREAD_COLOR)

# Convert the image to grayscale for processing
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# ------------------------------ Single Thresholding ------------------------------
def single_thresholding(image, threshold):
    _, th_img = cv2.threshold(image, threshold, 255, cv2.THRESH_BINARY)
    return th_img

# Apply single thresholding
single_thresh = single_thresholding(gray, 128)

# ------------------------------ Dual Thresholding ------------------------------
def dual_thresholding(image, low_thresh, high_thresh):
    lower = cv2.inRange(image, low_thresh, high_thresh)  # Pixels in range [low_thresh, high_thresh]
    upper = cv2.inRange(image, 0, low_thresh)  # Pixels below low_thresh
    upper += cv2.inRange(image, high_thresh, 255)  # Pixels above high_thresh
    result = lower + upper
    return result

# Apply dual thresholding
dual_thresh = dual_thresholding(gray, 80, 160)

# ------------------------------ Grayscale Thresholding ------------------------------
def grayscale_thresholding(image, threshold):
    _, th_img = cv2.threshold(image, threshold, 255, cv2.THRESH_BINARY)
    return th_img

# Apply grayscale thresholding
gray_thresh = grayscale_thresholding(gray, 128)

# ------------------------------ Gray Level Slicing - 1st Approach ------------------------------
def gray_level_slicing_1st(image, low_thresh, high_thresh):
    sliced = np.zeros_like(image)
    sliced[(image >= low_thresh) & (image <= high_thresh)] = 255
    return sliced

# Apply 1st approach of gray level slicing
sliced_1st = gray_level_slicing_1st(gray, 100, 150)

# ------------------------------ Gray Level Slicing - 2nd Approach ------------------------------
def gray_level_slicing_2nd(image, low_thresh, high_thresh, value):
    sliced = image.copy()
    sliced[(image >= low_thresh) & (image <= high_thresh)] = value
    sliced[(image < low_thresh) | (image > high_thresh)] = 0
    return sliced

# Apply 2nd approach of gray level slicing
sliced_2nd = gray_level_slicing_2nd(gray, 100, 150, 200)

# ------------------------------ Display Results ------------------------------
# Plot all results
plt.figure(figsize=(10, 8))

plt.subplot(3, 3, 1)
plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
plt.title('Original Image')
plt.axis('off')

plt.subplot(3, 3, 2)
plt.imshow(single_thresh, cmap='gray')
plt.title('Single Thresholding')
plt.axis('off')

plt.subplot(3, 3, 3)
plt.imshow(dual_thresh, cmap='gray')
plt.title('Dual Thresholding')
plt.axis('off')

plt.subplot(3, 3, 4)
plt.imshow(gray_thresh, cmap='gray')
plt.title('Grayscale Thresholding')
plt.axis('off')

plt.subplot(3, 3, 5)
plt.imshow(sliced_1st, cmap='gray')
plt.title('Gray Level Slicing 1st')
plt.axis('off')

plt.subplot(3, 3, 6)
plt.imshow(sliced_2nd, cmap='gray')
plt.title('Gray Level Slicing 2nd')
plt.axis('off')

plt.tight_layout()
plt.show()