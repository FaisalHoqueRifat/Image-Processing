# -*- coding: utf-8 -*-
"""Lab03.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ctY6qerdGkDDqGBYUTfsonyUvIGjrGpZ
"""

# Install OpenCV if not already installed
!pip install opencv-python-headless

import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files

# Upload image
uploaded = files.upload()
image_path = next(iter(uploaded))

# Read the image in grayscale
img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

# Convert image to numpy array
img_np = np.array(img)

# Show original image
def show_image(img, title="Image"):
    plt.imshow(img, cmap='gray')
    plt.title(title)
    plt.axis('off')
    plt.show()

# 1) Adding a constant (e.g., add 50 to each pixel)
def add_constant(image, constant=50):
    return np.clip(image + constant, 0, 255).astype(np.uint8)

# 2) Subtracting a constant (e.g., subtract 50 from each pixel)
def subtract_constant(image, constant=50):
    return np.clip(image - constant, 0, 255).astype(np.uint8)

# 3) Negative (Invert the image)
def negative(image):
    return 255 - image

# 4) Multiplying by a constant (e.g., multiply each pixel by 2)
def multiply_by_constant(image, constant=2):
    return np.clip(image * constant, 0, 255).astype(np.uint8)

# 5) Divide by a constant (e.g., divide each pixel by 2)
def divide_by_constant(image, constant=2):
    return np.clip(image // constant, 0, 255).astype(np.uint8)

# 6) AND (Bitwise AND with a constant, for example 128)
def bitwise_and(image, constant=128):
    return np.bitwise_and(image, constant)

# 7) OR (Bitwise OR with a constant, for example 128)
def bitwise_or(image, constant=128):
    return np.bitwise_or(image, constant)

# 8) XOR (Bitwise XOR with a constant, for example 128)
def bitwise_xor(image, constant=128):
    return np.bitwise_xor(image, constant)

# Apply operations
operations = [
    ("Original", img_np),
    ("Add Constant", add_constant(img_np)),
    ("Subtract Constant", subtract_constant(img_np)),
    ("Negative", negative(img_np)),
    ("Multiply by Constant", multiply_by_constant(img_np)),
    ("Divide by Constant", divide_by_constant(img_np)),
    ("AND", bitwise_and(img_np)),
    ("OR", bitwise_or(img_np)),
    ("XOR", bitwise_xor(img_np))
]

plt.figure(figsize=(15, 15))
# Display the results
for i, (title, img) in enumerate(operations):
    plt.subplot(3, 3, i + 1)
    plt.imshow(img, cmap='gray')
    plt.title(title)
    plt.axis('off')